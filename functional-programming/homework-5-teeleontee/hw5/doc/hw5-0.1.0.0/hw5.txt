-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/hw5#readme</a>
@package hw5
@version 0.1.0.0

module HW5.Base

-- | Errors in the Hi language
data HiError
HiErrorInvalidArgument :: HiError
HiErrorInvalidFunction :: HiError
HiErrorArityMismatch :: HiError
HiErrorDivideByZero :: HiError

-- | Expressions in the Hi language
data HiExpr
HiExprValue :: HiValue -> HiExpr
HiExprApply :: HiExpr -> [HiExpr] -> HiExpr
HiExprRun :: HiExpr -> HiExpr
HiExprDict :: [(HiExpr, HiExpr)] -> HiExpr

-- | Functions supported by the Hi language
data HiFun
HiFunDiv :: HiFun
HiFunMul :: HiFun
HiFunAdd :: HiFun
HiFunSub :: HiFun
HiFunNot :: HiFun
HiFunAnd :: HiFun
HiFunEquals :: HiFun
HiFunOr :: HiFun
HiFunLessThan :: HiFun
HiFunGreaterThan :: HiFun
HiFunNotLessThan :: HiFun
HiFunNotGreaterThan :: HiFun
HiFunNotEquals :: HiFun
HiFunIf :: HiFun
HiFunLength :: HiFun
HiFunToUpper :: HiFun
HiFunToLower :: HiFun
HiFunReverse :: HiFun
HiFunTrim :: HiFun
HiFunList :: HiFun
HiFunRange :: HiFun
HiFunFold :: HiFun
HiFunPackBytes :: HiFun
HiFunUnpackBytes :: HiFun
HiFunEncodeUtf8 :: HiFun
HiFunDecodeUtf8 :: HiFun
HiFunZip :: HiFun
HiFunUnzip :: HiFun
HiFunSerialise :: HiFun
HiFunDeserialise :: HiFun
HiFunRead :: HiFun
HiFunWrite :: HiFun
HiFunMkDir :: HiFun
HiFunChDir :: HiFun
HiFunParseTime :: HiFun
HiFunRand :: HiFun
HiFunEcho :: HiFun
HiFunCount :: HiFun
HiFunKeys :: HiFun
HiFunValues :: HiFun
HiFunInvert :: HiFun

-- | Values in the Hi language
data HiValue
HiValueBool :: Bool -> HiValue
HiValueNumber :: Rational -> HiValue
HiValueFunction :: HiFun -> HiValue
HiValueNull :: HiValue
HiValueString :: Text -> HiValue
HiValueList :: Seq HiValue -> HiValue
HiValueBytes :: ByteString -> HiValue
HiValueAction :: HiAction -> HiValue
HiValueTime :: UTCTime -> HiValue
HiValueDict :: Map HiValue HiValue -> HiValue

-- | Function arity data class
data Arity
Unary :: Arity
Binary :: Arity
Trinary :: Arity
Arbitrary :: Arity

-- | HiMonad typeclass for computing HiActions
class Monad m => HiMonad m
runAction :: HiMonad m => HiAction -> m HiValue

-- | Actions in the Hi language
data HiAction
HiActionRead :: FilePath -> HiAction
HiActionWrite :: FilePath -> ByteString -> HiAction
HiActionMkDir :: FilePath -> HiAction
HiActionChDir :: FilePath -> HiAction
HiActionCwd :: HiAction
HiActionNow :: HiAction
HiActionRand :: Int -> Int -> HiAction
HiActionEcho :: Text -> HiAction

-- | Type alias for a closed binary operation
type BinOp a = a -> a -> a

-- | Returns the arity of a HiFun
getArity :: HiFun -> Arity
instance GHC.Classes.Ord HW5.Base.HiFun
instance GHC.Generics.Generic HW5.Base.HiFun
instance GHC.Classes.Eq HW5.Base.HiFun
instance GHC.Show.Show HW5.Base.HiFun
instance GHC.Generics.Generic HW5.Base.HiError
instance GHC.Show.Show HW5.Base.HiError
instance GHC.Classes.Ord HW5.Base.HiAction
instance GHC.Generics.Generic HW5.Base.HiAction
instance GHC.Classes.Eq HW5.Base.HiAction
instance GHC.Show.Show HW5.Base.HiAction
instance GHC.Classes.Ord HW5.Base.HiValue
instance GHC.Generics.Generic HW5.Base.HiValue
instance GHC.Classes.Eq HW5.Base.HiValue
instance GHC.Show.Show HW5.Base.HiValue
instance GHC.Classes.Eq HW5.Base.HiExpr
instance GHC.Show.Show HW5.Base.HiExpr
instance Codec.Serialise.Class.Serialise HW5.Base.HiValue
instance Codec.Serialise.Class.Serialise HW5.Base.HiAction
instance Codec.Serialise.Class.Serialise HW5.Base.HiError
instance Codec.Serialise.Class.Serialise HW5.Base.HiFun

module HW5.Action

-- | IO for the Hi language takes in a set of the users permissions and
--   returns an IO operation
newtype HIO a
HIO :: (Set HiPermission -> IO a) -> HIO a
[runHIO] :: HIO a -> Set HiPermission -> IO a

-- | Permissions for read<i>write</i>time operations
data HiPermission
AllowRead :: HiPermission
AllowWrite :: HiPermission
AllowTime :: HiPermission
newtype PermissionException
PermissionRequired :: HiPermission -> PermissionException
instance GHC.Classes.Ord HW5.Action.HiPermission
instance GHC.Classes.Eq HW5.Action.HiPermission
instance GHC.Show.Show HW5.Action.HiPermission
instance GHC.Show.Show HW5.Action.PermissionException
instance GHC.Base.Monad HW5.Action.HIO
instance GHC.Base.Applicative HW5.Action.HIO
instance GHC.Base.Functor HW5.Action.HIO
instance HW5.Base.HiMonad HW5.Action.HIO
instance GHC.Exception.Type.Exception HW5.Action.PermissionException

module HW5.Impl

-- | Returns the length of a list or a string
hiLength :: HiMonad m => HiValue -> ExceptT HiError m HiValue

-- | Implementation for the count function, calls countString or countList
--   or countByteString depending on the argument
hiCount :: HiMonad m => HiValue -> ExceptT HiError m HiValue

-- | HiFunAdd implementation
hiAdd :: HiMonad m => HiValue -> HiValue -> ExceptT HiError m HiValue

-- | HiFunSub implementation
hiSub :: HiMonad m => HiValue -> HiValue -> ExceptT HiError m HiValue

-- | HiFunMul implementation
hiMul :: HiMonad m => HiValue -> HiValue -> ExceptT HiError m HiValue

-- | HiFunDiv implementation
hiDiv :: HiMonad m => HiValue -> HiValue -> ExceptT HiError m HiValue

-- | HiFunLessThan implementation
hiLT :: HiMonad m => HiValue -> HiValue -> ExceptT HiError m HiValue

-- | HiFunGreaterThan implementation
hiGT :: HiMonad m => HiValue -> HiValue -> ExceptT HiError m HiValue

-- | HiFunNotLessThan implementation
hiNLT :: HiMonad m => HiValue -> HiValue -> ExceptT HiError m HiValue

-- | HiFunNotGreaterThan implementation
hiNGT :: HiMonad m => HiValue -> HiValue -> ExceptT HiError m HiValue

-- | HiFunEquals implementation
hiEQ :: HiMonad m => HiValue -> HiValue -> ExceptT HiError m HiValue

-- | HiFunNotEquals implementation
hiNEQ :: HiMonad m => HiValue -> HiValue -> ExceptT HiError m HiValue

-- | Range implementation
hiRange :: HiMonad m => HiValue -> HiValue -> ExceptT HiError m HiValue
hiWrite :: HiMonad m => HiValue -> HiValue -> ExceptT HiError m HiValue
hiNot :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiReverse :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiPackBytes :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiUnpackBytes :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiEncodeUtf8 :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiDecodeUtf8 :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiZip :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiUnzip :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiSerialise :: HiMonad m => Serialise a => a -> ExceptT HiError m HiValue
hiDeserialise :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiRead :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiMkdir :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiCd :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiEcho :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiRandom :: Monad m => HiValue -> HiValue -> ExceptT HiError m HiValue
hiTimeValue :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiKeys :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiValues :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiInvert :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiToLower :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiToUpper :: HiMonad m => HiValue -> ExceptT HiError m HiValue
hiTrim :: HiMonad m => HiValue -> ExceptT HiError m HiValue

-- | Monadic analog to foldl1 (like foldlM is to foldl) in the context of
--   the Hi language
foldl1M :: (Foldable t, HiMonad m) => (a -> a -> ExceptT HiError m a) -> t a -> ExceptT HiError m a

-- | Implementation of slicing on supported containers
hiSlice :: HiMonad m => HiValue -> HiValue -> HiValue -> ExceptT HiError m HiValue

-- | Indexing implementation on supported containers
hiIndex :: HiMonad m => HiValue -> HiValue -> ExceptT HiError m HiValue

module HW5.Evaluator

-- | Basic Logic of Evaluation of Expressions of the Hi Language. -
--   Implementation details are abstracted away to Impl.hs
--   
--   The main point of entry for our evaluator, it pattern matches on the
--   value of HiExpr and depending on if the expression is a value, action,
--   index application (on strings, lists, bytestrings) returns the
--   corresponding value equating to it.
eval :: HiMonad m => HiExpr -> m (Either HiError HiValue)

module HW5.Parser

-- | Parses the Grammar of the Hi language that is defined in Base.hs
parse :: String -> Either (ParseErrorBundle String Void) HiExpr

module HW5.Pretty

-- | Prettyprints a HiValue
prettyValue :: HiValue -> Doc AnsiStyle
