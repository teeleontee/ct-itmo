-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/hw6#readme</a>
@package hw6
@version 0.1.0.0


-- | This module defines <a>ListZipper</a> datatype. Feel free to define
--   additional helper functions to work with this datatype in this module.
module Data.ListZipper
data ListZipper a
LZ :: [a] -> a -> [a] -> ListZipper a
iterateTail :: (a -> a) -> a -> [a]
genericMove :: (z a -> z a) -> (z a -> z a) -> z a -> ListZipper (z a)
listLeft :: ListZipper a -> ListZipper a
listRight :: ListZipper a -> ListZipper a
listWrite :: a -> ListZipper a -> ListZipper a
toList :: ListZipper a -> Int -> [a]
instance GHC.Base.Functor Data.ListZipper.ListZipper
instance Control.Comonad.Comonad Data.ListZipper.ListZipper


-- | This module defines <a>Grid</a> datatype.
module Data.Grid
newtype Grid a
Grid :: ListZipper (ListZipper a) -> Grid a
[unGrid] :: Grid a -> ListZipper (ListZipper a)

-- | <pre>
--   <a>extract</a> . <a>fmap</a> f = f . <a>extract</a>
--   </pre>
extract :: Comonad w => w a -> a
left :: Grid a -> Grid a
right :: Grid a -> Grid a
up :: Grid a -> Grid a
down :: Grid a -> Grid a
gridRead :: Grid a -> a
gridWrite :: a -> Grid a -> Grid a
horizontal :: Grid a -> ListZipper (Grid a)
vertical :: Grid a -> ListZipper (Grid a)
instance GHC.Base.Functor Data.Grid.Grid
instance Control.Comonad.Comonad Data.Grid.Grid

module HW6.T1

-- | Type alias for an array of lists of Key-ValuePair The hash of the key
--   will be the index of this array where the element may be stored
type BucketsArray stm k v = TArray stm Int (Bucket k v)

-- | Concurrent Hash Table data type
data CHT stm k v
CHT :: TVar stm (BucketsArray stm k v) -> TVar stm Int -> CHT stm k v
[chtBuckets] :: CHT stm k v -> TVar stm (BucketsArray stm k v)
[chtSize] :: CHT stm k v -> TVar stm Int

-- | Creates an empty Hash Table
newCHT :: MonadConc m => m (CHT (STM m) k v)

-- | Gets Value from Key in CHT. If the key isn't found, returns
--   <a>Nothing</a>
getCHT :: (MonadConc m, Key k) => k -> CHT (STM m) k v -> m (Maybe v)

-- | Puts Key Value pair into CHT
putCHT :: (MonadConc m, Key k) => k -> v -> CHT (STM m) k v -> m ()

-- | returns the amount of elements that are put into the CHT
sizeCHT :: MonadConc m => CHT (STM m) k v -> m Int

-- | Initial capacity of CHT
initCapacity :: Int

-- | This is the threshold for when we need to update the capacity of our
--   CHT. chtSize &gt;= capacity * loadFactor then resize
loadFactor :: Double

module HW6.T2

-- | A list of type-level strings
type TSet = [Symbol]

-- | Checks whether we contain a type-level string
type family Contains (name :: Symbol) (set :: TSet) :: Bool

-- | Adds a type-level string to the set if it isn't in already there
type family Add (v :: Symbol) (set :: TSet) :: TSet

-- | Deletes a type-level string if it contains it
type family Delete (name :: Symbol) (set :: TSet) :: TSet

module HW6.T3

-- | data type for configuring wanted properties of our virus i.e. how
--   easily it spreads (probability), the incubationPeriod, illnessDuration
--   and immunityDuration
data Config
Config :: Double -> Int -> Int -> Int -> Config
[probability] :: Config -> Double
[incubationPeriod] :: Config -> Int
[illnessDuration] :: Config -> Int
[immunityDuration] :: Config -> Int

-- | Cell contains it's state and a generator for creating random numbers
data Cell
Cell :: CellState -> StdGen -> Cell
[cellState] :: Cell -> CellState
[cellRand] :: Cell -> StdGen

-- | A Cell can be Healthy, Infected, Ill or Imune
data CellState
Healthy :: CellState
Infected :: Int -> CellState
Ill :: Int -> CellState
Immune :: Int -> CellState

-- | Type alias for a Grid containing Cells
type Comonad19Grid = Grid Cell

-- | Takes in the size (wanted view) of the grid and prints it
printGrid :: Int -> Comonad19Grid -> IO ()

-- | Creates an infinite list of grids using the given configuration. Each
--   element of this list represents one infection simulation step. Takes
--   in a seed and a config
simulate :: Int -> Config -> [Comonad19Grid]
instance GHC.Show.Show HW6.T3.Config
instance GHC.Show.Show HW6.T3.Cell
instance GHC.Show.Show HW6.T3.CellState

module Data.Parser
data Opts
Opts :: !Double -> !Int -> !Int -> !Int -> !Int -> !Int -> Opts
[optProbability] :: Opts -> !Double
[optIncPeriod] :: Opts -> !Int
[optIllPeriod] :: Opts -> !Int
[optImmPeriod] :: Opts -> !Int
[optGridSize] :: Opts -> !Int
[optIterations] :: Opts -> !Int
getOptionsAndConfig :: IO (Opts, Config)
instance GHC.Show.Show Data.Parser.ParseException
instance GHC.Exception.Type.Exception Data.Parser.ParseException
instance GHC.Show.Show Data.Parser.Comomonad19OptsEnum
